source ~/.profile

plugins=(
  fzf
  fzf-tab
  systemd
  sudo
  zsh-autosuggestions
  zsh-syntax-highlighting
  vi-mode
)

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export ZSH_THEME="hemul"
zstyle ':omz:update' mode disabled
source $ZSH/oh-my-zsh.sh

# Flush cached completion configuration once every day
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
  compinit
else
  compinit -C
fi

setopt no_share_history
unsetopt beep
set -o ignoreeof

{{ if .is_arch -}}
source /usr/share/fzf/key-bindings.zsh
{{ end -}}
{{ if or (eq .osid "linux-ubuntu") (eq .osid "linux-termux") }}
source $HOME/.fzf/key-bindings.zsh
source <(kubectl completion zsh)
{{ end -}}

{{ $fd := "fd" }}
{{- if lookPath "fdfind" -}}
{{ $fd = "fdfind" }}
{{- end -}}
export FZF_DEFAULT_COMMAND='{{ $fd }} --type f --hidden --follow -E .git --no-ignore-vcs'
export FZF_ALT_C_COMMAND='{{ $fd }} --type d --hidden --follow -E .git --no-ignore-vcs'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_DEFAULT_OPTS="--color fg:252,hl:67,fg+:252,bg+:235,hl+:81 --color info:144,prompt:161,spinner:135,pointer:135,marker:118"

# export BAT_PAGER="less -RF --mouse"

export DISABLE_AUTO_TITLE='true'
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#4C566A"

# Load completion modules
autoload -Uz compinit

################################
# Keyboard Setup

# vi mode prompt
bindkey -v
export KEYTIMEOUT=1

bindkey '^[l' forward-word
bindkey '^[h' backward-word
bindkey '^[L' end-of-line
bindkey '^[H' beginning-of-line
bindkey '^?' backward-delete-char
bindkey '^w' backward-kill-word
# bindkey '^r' history-incremental-search-backward - conflicts with fzf ctrl r
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# From
# https://wiki.archlinux.org/index.php/Zsh#Key_bindings

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-line
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-line
[[ -n "${key[ShiftTab]}"  ]] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
    autoload -Uz add-zle-hook-widget
    function zle_application_mode_start {
        echoti smkx
    }
    function zle_application_mode_stop {
        echoti rmkx
    }
    add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
    add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search

bindkey '^[k' up-line-or-beginning-search
bindkey '^[j' down-line-or-beginning-search

bindkey '^S' sudo-command-line

########################
if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
fi

# more here: https://grml.org/zsh/zsh-lovers.html
alias l='ls -l'
alias la='ls -la'
alias ll='ls -l'
alias h=history
alias e=exit
alias c=clear
alias dc=docker-compose
alias vim=nvim
alias t=go-task
alias cz=chezmoi
alias sshh=ssh-host
alias -g NUL="> /dev/null 2>&1"
alias -g NE="2>/dev/null"
alias -g CL="2>&1 | cat -A"
alias -g LL="2>&1 | less"
alias -g L="| less"
alias -g H='| head'
alias -g HL='|& head -20'
alias -g T='| tail'
alias -g TL='| tail -20'
alias -g G='| grep'

{{- if lookPath "fdfind" }}
alias fd=fdfind
{{ end -}}
{{- if lookPath "eza" }}
alias ls=eza
alias lt='ls -laFT'
{{- end }}
{{- if lookPath "bat" }}
alias cat=bat
{{- end }}
{{- if lookPath "zoxide" }}
alias cd=z
{{- end }}
{{- if lookPath "k9s" }}
alias kns=k9s
{{- end }}
{{- if lookPath "proot-distro" }}
alias arch='proot-distro login archlinux --termux-home --user hemul --work-dir ${PWD}'
{{- end }}

{{- if lookPath "uv" }}
alias pip='uv pip'
{{- end }}

timestamp () {
    date "+%Y.%m.%d-%H.%M.%S"
}

ssh-host () {
  ssh -G "${1}" | awk '/^hostname / { print $2 }'
}

{{- if lookPath "zoxide" }}
eval "$(zoxide init zsh)"
{{- end -}}

{{- if lookPath "kubectl" }}

{{- $kube := "kubectl" -}}
{{- if lookPath "kubecolor" }}
{{- $kube = "kubecolor" }}
alias k=kubecolor
compdef kubecolor=kubectl
{{ end -}}

kubewatch () {
  ns="${1-}"
  [ -z "$ns" ] && ns_flag="-A" || ns_flag="-n"
  watch -cwt -x zsh -c \
    "output=\$(kubecolor --force-colors get events $ns_flag $ns --sort-by='{.lastTimestamp}');
    (echo \$output | head -n 1);
    (echo \$output | tail -n +2 | tac)"
}
_kubewatch () {
  compadd $(kubectl get ns | tail -n +2 | awk '{ print $1 }')
}
compdef _kubewatch kubewatch
alias kw=kubewatch

{{ end }}

{{- if lookPath "flux" }}
fluxwatch () {
  kustomization="${1-}"
  watch -cwt -x zsh -c \
    "output=\$(flux get kustomization ${kustomization});
    (echo \$output | head -n 1);
    (echo \$output | tail -n +2 | sort -k 4,4 -k 1,1)"
}
_fluxwatch () {
  compadd $(flux get kustomization | tail -n +2 | awk '{ print $1 }')
}
compdef _fluxwatch fluxwatch
alias fw=fluxwatch
{{ end }}

{{- if lookPath "adb" }}
function adbtext() {
  while read -r line; do
    adb shell input text ${(q)${line// /%s}}
  done
}
{{ end }}

{{- if .is_wsl }}
function win-to-wsl-path() {
  echo $(wslpath $(cmd.exe /C "echo $@" 2>/dev/null | tr -d '\r' | sed 's/WINDOWS/Windows/'))
}
{{ end }}

function ssh-luks-unlock() {
  ssh_target="${1-}"
  force_interactive="${2-}"
  ssh_command=(ssh "root@${ssh_target}" -p 222)

  passphrase=""
  if [ -z "${force_interactive}" ] && [ -f "$HOME/keys/${ssh_target}-unlock-passphrase.gpg" ]; then
    echo "Decrypting unlock passphrase..."
    passphrase=$(gpg -d "$HOME/keys/${ssh_target}-unlock-passphrase.gpg" 2>/dev/null)

    if [ -z ${passphrase} ]; then
      echo "Passphrase key decryption failed (or empty string)"
      return 1
    fi
  fi

  if [ -z "${force_interactive}" ]; then
    echo "Unlocking luks over ssh with passhphrase..."
    echo "${passphrase}" | "${ssh_command[@]}" console_auth
  else
    echo "Starting interactive ssh session..."
    "${ssh_command[@]}"
  fi

  echo "Done"
}

{{- if lookPath "runpodctl" }}
function runpod-save-ssh() {
  local runpod_ssh_config="$HOME/.ssh/runpod_config"
  local ssh_config="$HOME/.ssh/config"
  local temp_config=$(mktemp)

if [ ! -f "$ssh_config" ]; then
    echo "Include $runpod_ssh_config" > "$ssh_config"
else
    if ! grep -qF "Include $runpod_ssh_config" "$ssh_config"; then
        printf "Include %s\n" "$runpod_ssh_config" > "$temp_config"
        cat "$ssh_config" >> "$temp_config"
        mv "$temp_config" "$ssh_config"
        echo "Added Include $runpod_ssh_config to the top of $ssh_config"
    fi
fi
  
  echo "Getting RunPod SSH connections..."
  local runpod_output=$(runpodctl ssh connect 2>/dev/null)

  # Remove existing runpod_ entries from SSH config
  if [ -f "$runpod_ssh_config" ]; then
    awk '
      /^Host runpod_/ { 
        skip = 1
        next 
      }
      /^Host / && skip { 
        skip = 0 
      }
      !skip { print }
    ' "$runpod_ssh_config" > "$temp_config"
  fi

  if [ -z "$runpod_output" ]; then
    echo "No RunPod connections found or runpodctl failed"
    mv "$temp_config" "$runpod_ssh_config"
    return 1
  fi
  
  # Parse runpodctl output and add new entries
  echo "$runpod_output" | while IFS= read -r line; do
    if [[ "$line" =~ ssh[[:space:]]+root@([^[:space:]]+)[[:space:]]+-p[[:space:]]+([0-9]+)[[:space:]]+#[[:space:]]+pod[[:space:]]+[\{][[:space:]]+id:[[:space:]]+\"[^\"]+\",[[:space:]]+name:[[:space:]]+\"([^\"]+)\"[[:space:]]+[\}] ]]; then
      local hostname="${match[1]}"
      local port="${match[2]}"
      local pod_name="${match[3]}"
      local host_alias="runpod_${pod_name}"
      
      echo "Adding SSH host: $host_alias"
      echo "" >> "$temp_config"
      echo "Host $host_alias" >> "$temp_config"
      echo "    HostName $hostname" >> "$temp_config"
      echo "    Port $port" >> "$temp_config"
      echo "    User root" >> "$temp_config"
    fi
  done
  
  # Replace the original config file
  mv "$temp_config" "$runpod_ssh_config"
  chmod 600 "$runpod_ssh_config"

  echo "SSH config ${runpod_ssh_config} updated with RunPod connections"
}
{{- end -}}
